function generate_help( toolbox_path, toolbox_name )
%GENERATE_HELP auto generation of toolbox help (html)
%
%  GENERATE_HELP generate toolbox help for current working directory.
%
%  GENERATE_HELP(path) generate help files for toolbox in the specified
%  path.
%
%  GENERATE_HELP(path, name) specifies a custom name for the toolbox (by
%  default the name of the toolbox directory is used).
%
%  This function automatically generates help for a toolbox. Html help
%  files for each function and class method are autogenerated from their
%  help sections.
%
%  A html file with an alphabetical function list is created. If a
%  Contents.m file exist and it has sections, then a html file with a
%  categorical function list is created as well. For this the Contents.m
%  file should be formatted as follows:
%  1. For each function there can be a line that has the function name, a
%     dash, and a brief description
%  2. Any non-empty line that does not contain a dash, starts a new
%     category.
%
%  The helptoc.xml file is automatically generated and menu items for
%  the function lists and the toolbox frontpage are included. To add
%  your own entries to the toolbox help menu, you have to create a
%  toc.txt file in the /html subfolder. The /html folder should also
%  contain .html files for each html target in the toc.txt.
%  Each line in toc.txt should have the following format:
%  [# spaces indicating the level][label]:[html target]:[icon].
%
%  The info.xml file is autogenerated. This file will inform matlab
%  where it can find the help files for this toolbox. It also specifies
%  the entries for the start menu. By default a link to the documentation
%  and to the demos page (if a demos.xml file exists) are added to the
%  start menu. To add you own entries, create start.txt file in the /html
%  subfolder. Each line in start.txt should have the following format:
%  [label]:[callback]:[icon]
%
%  It is up to you to create a demos.xml file and the needed html files
%  if you want your toolbox to be listed in the Demos section of the
%  matlab help window.
%

%  Copyright 2005-2006 Fabian Kloosterman

doc_path = 'html';

if nargin<1
  toolbox_path = pwd;
end

%set path delimiter
if isunix
  delimiter = '/';
else
  delimiter = '\\';
end

%change to toolbox path
old_path = pwd;
cd(toolbox_path);
toolbox_path = pwd;

%find toolbox name if not provided
if nargin<2 || isempty(toolbox_name)
  toolbox_name = pwd;
  toolbox_name = strread(toolbox_name, '%s', 'delimiter', delimiter);
  toolbox_name = toolbox_name{end};
end

%parse toc.txt
T = parse_toc( fullfile(doc_path, 'toc.txt') );

%build documentation
build_doc( doc_path, toolbox_name, T );

%get functions and classes
hidden_functions = {'makesources', 'contents'};
hidden_class_methods = union(hidden_functions, {'set', 'get', 'subsref', ...
                    'subsasgn', 'end', 'subsindex', 'Contents', 'schema'});

toolbox_functions = what( toolbox_path );
toolbox_functions.m = strrep( toolbox_functions.m, '.m', '');

toolbox_functions.m( ismember( lower(toolbox_functions.m), hidden_functions) ) = [];

%build function pages
build_functions( toolbox_path, doc_path, toolbox_name, toolbox_functions.m );

%build function list
build_function_list( toolbox_path, doc_path, toolbox_name, toolbox_functions.m );

%find classes vs packages
ispkg = false(numel(toolbox_functions.classes),1);
for k=1:numel(toolbox_functions.classes)
  ispkg(k) = ~isempty( findpackage(toolbox_functions.classes{k} ) );
end

%build classes
build_classes( toolbox_path, doc_path, toolbox_name, toolbox_functions.classes(~ispkg), hidden_class_methods );

%build packages
build_packages( toolbox_path, doc_path, toolbox_name, ...
                toolbox_functions.classes(ispkg), hidden_class_methods );

%build categorical function list
[cat_list, contents] = build_category_list( toolbox_path, doc_path, toolbox_name, ...
                                            hidden_functions ); %#ok

%build toolbox front page
build_frontpage( toolbox_path, doc_path, toolbox_name, T, cat_list, ...
                 toolbox_functions.classes(~ispkg), toolbox_functions.classes(ispkg) );

%build table of contents
build_helptoc( toolbox_path, doc_path, toolbox_name, T, cat_list );

%build info
build_info( toolbox_path, doc_path, toolbox_name );

%create images
img = logical( imread('fkHelp_arrow.gif') );
imwrite( img, fullfile( doc_path, 'next.gif') );
imwrite( rot90(img), fullfile( doc_path, 'up.gif') );
imwrite( rot90(img,2), fullfile( doc_path, 'prev.gif') );

cd(old_path);